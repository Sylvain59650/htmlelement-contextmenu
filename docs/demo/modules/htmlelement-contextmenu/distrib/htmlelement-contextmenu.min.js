"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

window.webBrowserDetection = function () {
  var e = window.navigator.userAgent.toLowerCase(),
      r = /(edge)\/([\w.]+)/.exec(e) || /(opr)[\/]([\w.]+)/.exec(e) || /(chrome)[ \/]([\w.]+)/.exec(e) || /(iemobile)[\/]([\w.]+)/.exec(e) || /(version)(applewebkit)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+).*(version)[ \/]([\w.]+).*(safari)[ \/]([\w.]+)/.exec(e) || /(webkit)[ \/]([\w.]+)/.exec(e) || /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e) || /(msie) ([\w.]+)/.exec(e) || 0 <= e.indexOf("trident") && /(rv)(?::| )([\w.]+)/.exec(e) || e.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e) || [],
      i = /(ipad)/.exec(e) || /(ipod)/.exec(e) || /(windows phone)/.exec(e) || /(iphone)/.exec(e) || /(kindle)/.exec(e) || /(silk)/.exec(e) || /(android)/.exec(e) || /(win)/.exec(e) || /(mac)/.exec(e) || /(linux)/.exec(e) || /(cros)/.exec(e) || /(playbook)/.exec(e) || /(bb)/.exec(e) || /(blackberry)/.exec(e) || [],
      o = {},
      a = { browser: r[5] || r[3] || r[1] || "", version: r[2] || r[4] || "0", versionNumber: r[4] || r[2] || "0", platform: i[0] || "" };if (a.browser && (o[a.browser] = !0, o.version = a.version, o.versionNumber = parseInt(a.versionNumber, 10)), a.platform && (o[a.platform] = !0), (o.android || o.bb || o.blackberry || o.ipad || o.iphone || o.ipod || o.kindle || o.playbook || o.silk || o["windows phone"]) && (o.mobile = !0), (o.cros || o.mac || o.linux || o.win) && (o.desktop = !0), (o.chrome || o.opr || o.safari) && (o.webkit = !0), o.rv || o.iemobile) {
    var s = "msie";o[a.browser = s] = !0;
  }if (o.edge) {
    delete o.edge;var b = "msedge";o[a.browser = b] = !0;
  }if (o.safari && o.blackberry) {
    var w = "blackberry";o[a.browser = w] = !0;
  }if (o.safari && o.playbook) {
    var c = "playbook";o[a.browser = c] = !0;
  }if (o.bb) {
    var n = "blackberry";o[a.browser = n] = !0;
  }if (o.opr) {
    var l = "opera";o[a.browser = l] = !0;
  }if (o.safari && o.android) {
    var d = "android";o[a.browser = d] = !0;
  }if (o.safari && o.kindle) {
    var x = "kindle";o[a.browser = x] = !0;
  }if (o.safari && o.silk) {
    var p = "silk";o[a.browser = p] = !0;
  }return o.name = a.browser, o.platform = a.platform, o;
};
window.isDef = function (value) {
  return value !== null && typeof value !== "undefined";
};
var classNames = {
  menuItem: "cmItem",
  hover: "cmHover",
  disabled: "cmDisabled",
  visible: "cmVisible",
  notSelectable: "cmNoSelect",
  selectable: "cmSelect",
  icon: "cmIcon",
  separator: "cmSeparator"
};

var shortcutPrefixes = {
  win_msie: "Alt+",
  win_mozilla: "Alt+Shift+",
  win_chrome: "Alt+",
  win_safari: "",
  win_opera: ""
};

/* global webBrowserDetection */

var ContextMenu = function () {
  function ContextMenu(menuInfo) {
    _classCallCheck(this, ContextMenu);

    this.__menuInfo = menuInfo;
    this.targets = document.querySelectorAll(menuInfo.targetId);
    this.makeContextMenu();
    document.body.appendChild(this.contextmenu);
    this.registerListeners();
    this.browser = webBrowserDetection();
    this.browserKey = this.browser.platform + "_" + this.browser.name;
  }

  _createClass(ContextMenu, [{
    key: "menuOn",
    value: function menuOn() {
      var self = this;
      this.contextmenu.style.display = "block";
      this.contextmenu.selectedIndex = 0;
      document.addEventListener("click", function () {
        self.menuOff();
      }, { once: true });
      this.contextmenu.focus();
    }
  }, {
    key: "menuOff",
    value: function menuOff() {
      this.contextmenu.style.display = "none";
    }
  }, {
    key: "menuInfo",
    value: function menuInfo() {
      return this.__menuInfo;
    }
  }, {
    key: "stopEvent",
    value: function stopEvent(e) {
      e.preventDefault();
      e.stopImmediatePropagation();
    }
  }, {
    key: "moveSelected",
    value: function moveSelected(direction) {
      var contextmenu = this.contextmenu;
      if (contextmenu.style.display === "block") {
        var menuItems = contextmenu.getElementsByClassName(classNames.selectable);
        if (contextmenu.selectedIndex !== -1) {
          menuItems[contextmenu.selectedIndex].classList.remove(classNames.hover);
        }
        contextmenu.selectedIndex += direction;
        if (contextmenu.selectedIndex === -1) {
          contextmenu.selectedIndex = menuItems.length - 1;
        } else if (contextmenu.selectedIndex >= menuItems.length) {
          contextmenu.selectedIndex = 0;
        }
        this.__setClasses(menuItems[contextmenu.selectedIndex], classNames.hover);
      }
    }
  }, {
    key: "popup",
    value: function popup(x, y) {
      var self = this;
      self.onBeforeShow();
      self.menuOn();
      self.setMenuPosition({ x: x, y: y });
    }
  }, {
    key: "registerListeners",
    value: function registerListeners() {
      var self = this;
      window.addEventListener("resize", function () {
        self.menuOff();
      });

      this.contextmenu.addEventListener("mousedown", function (e) {
        self.stopEvent(e);
        if (e.button === 0 || e.button === 1 || e.button === 2) {
          self.menuOff();
          e.target.click();
        }
      });

      for (var i = 0; i < this.targets.length; i++) {
        var target = this.targets[i];
        target.addEventListener("contextmenu", function (e) {
          self.stopEvent(e);
          self.onBeforeShow();
          self.menuOn();
          var pos = self.getMousePosition(e);
          self.setMenuPosition(pos);
        });
      }

      this.contextmenu.addEventListener("keydown", function (e) {
        self.__keydownManagement(e);
      });
    }
  }, {
    key: "__keydownManagement",
    value: function __keydownManagement(e) {
      switch (e.keyCode) {
        case 27:
          // ESC Key
          self.menuOff();
          break;
        case 38:
          // Up arrow
          self.moveSelected(-1);
          break;
        case 40:
          // Down arrow
          self.moveSelected(1);
          break;
        case 46:
          e.cancelBubble = true;
          self.stopEvent(e);
          break;
        case 8:
          e.cancelBubble = true;
          self.stopEvent(e);
          break;
        case 13:
          // Enter
          var menuItems = self.contextmenu.getElementsByClassName(classNames.selectable);
          if (self.contextmenu.selectedIndex >= 0) {
            var hovered = menuItems[self.contextmenu.selectedIndex];
            self.menuOff();
            hovered.click();
          }
          break;
      }
    }
  }, {
    key: "getMousePosition",
    value: function getMousePosition(e) {
      var posx = 0;
      var posy = 0;

      if (!e) {
        e = window.event;
      }
      if (e.pageX || e.pageY) {
        posx = e.pageX;
        posy = e.pageY;
      } else if (e.clientX || e.clientY) {
        posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
        posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
      }

      return {
        x: posx,
        y: posy
      };
    }
  }, {
    key: "setMenuPosition",
    value: function setMenuPosition(pos) {
      var menuWidth = this.contextmenu.offsetWidth + 3;
      var menuHeight = this.contextmenu.offsetHeight + 3;
      var windowWidth = window.innerWidth;
      var windowHeight = window.innerHeight;
      if (windowWidth - pos.x < menuWidth) {
        this.contextmenu.style.left = windowWidth - menuWidth - 3 + "px";
      } else {
        this.contextmenu.style.left = pos.x + "px";
      }
      if (windowHeight - pos.y < menuHeight) {
        this.contextmenu.style.top = windowHeight - menuHeight + 3 + "px";
      } else {
        this.contextmenu.style.top = pos.y + 3 + "px";
      }
    }
  }, {
    key: "onBeforeShow",
    value: function onBeforeShow() {
      if (window.isDef(this.__menuInfo.beforeShowing)) {
        this.__menuInfo.beforeShowing();
      }
      var i = 0;
      var menuItems = this.contextmenu.getElementsByClassName(classNames.menuItem);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = this.__menuInfo.items[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;

          var show = "";
          if (item.showing) {
            show = item.showing();
          }
          this.__setClasses(menuItems[i], show);
          i++;
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      this.redrawItems();
    }
  }, {
    key: "insertItem",
    value: function insertItem(menuItem, position) {
      if (!window.isDef(position) || position >= this.__menuInfo.items.length) {
        this.__menuInfo.items.push(menuItem);
      } else {
        this.__menuInfo.items.splice(position, 0, menuItem);
      }
      this.redrawItems();
    }
  }, {
    key: "removeItem",
    value: function removeItem(menuItem) {
      this.__menuInfo.items = this.__menuInfo.items.filter(function (x) {
        return x !== menuItem.id;
      });
    }
  }, {
    key: "redrawItems",
    value: function redrawItems() {
      this.contextmenu.innerHTML = "";
      this.contextmenu.contentEditable = true;
      this.contextmenu.setAttribute("readonly", "readonly");
      this.contextmenu.setAttribute("spellcheck", "false");
      if (this.__menuInfo.items) {
        for (var i = 0; i < this.__menuInfo.items.length; i++) {
          this.contextmenu.appendChild(this.makeMenuItem(this.__menuInfo.items[i], i));
        }
      }
    }
  }, {
    key: "makeContextMenu",
    value: function makeContextMenu() {
      this.contextmenu = document.createElement("ul");
      this.contextmenu.id = this.__menuInfo.menuId;
      this.contextmenu.classList.add("contextmenu");
      this.contextmenu.style.display = "none";
      this.redrawItems();
    }
  }, {
    key: "__setClasses",
    value: function __setClasses(element, classes) {
      if (classes) {
        var arr = classes.split(" ");
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = arr[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var cl = _step2.value;

            if (cl.indexOf("-") === 0) {
              cl = cl.substring(1);
              element.classList.remove(cl);
            } else {
              element.classList.add(cl);
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }
  }, {
    key: "makeMenuItem",
    value: function makeMenuItem(option, nth) {
      var li = document.createElement("li");
      li.classList.add(classNames.menuItem);
      if (option.label === "sep") {
        this.__setClasses(li, classNames.separator + " " + classNames.notSelectable);
      } else {
        if (option.html) {
          li.innerHTML = option.html();
        } else {
          li.innerText = option.label;
        }
        li.id = this.contextmenu.id + "-" + String(nth);
        if (option.accesskey && !option.disabled) {
          li.setAttribute("accesskey", option.accesskey);
          if (this.__menuInfo.showAccessKey) {
            var sc = document.createElement("span");
            sc.classList.add("contextmenu-shortcut");
            var tmp = shortcutPrefixes[this.browserKey];
            if (!window.isDef(tmp)) {
              tmp = "";
            }
            sc.innerText = tmp + option.accesskey.toUpperCase();
            li.appendChild(sc);
          }
        }
        this.__setClasses(li, option.class);
        // if (option.icon) {
        //   debugger;
        //   var url = "url(" + option.icon + ")";
        //   window.getComputedStyle(li, ":before").setPropertyValue("content", url);
        // }
        if (window.isDef(option.disabled) && option.disabled) {
          this.__setClasses(classNames.disabled + " -" + classNames.selectable);
        } else {
          this.__setClasses(classNames.selectable + " -" + classNames.disabled);
          if (window.isDef(option.fn) && !window.isDef(option.html)) {
            li.onclick = option.fn;
          }
          if (option.items) {
            for (var i = 0; i < option.items.length; i++) {
              var opt = option.items[i];
              var m = this.makeMenuItem(opt, i);
              li.appendChild(m);
            }
          }
        }
      }
      return li;
    }
  }]);

  return ContextMenu;
}();